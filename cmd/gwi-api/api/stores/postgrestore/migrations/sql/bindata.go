// Code generated by go-bindata.
// sources:
// 1_init.down.sql
// 1_init.up.sql
// sql.go
// DO NOT EDIT!

package sql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x49\x4d\xcc\x8d\xcf\x4d\xcd\x4d\x4a\x2d\x2a\xb6\xe6\x42\x93\x40\x15\x29\xcb\xcf\x29\xcd\x2b\x49\x05\x29\x04\x04\x00\x00\xff\xff\xb5\x7a\x54\x29\x41\x00\x00\x00")

func _1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initDownSql,
		"1_init.down.sql",
	)
}

func _1_initDownSql() (*asset, error) {
	bytes, err := _1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init.down.sql", size: 65, mode: os.FileMode(420), modTime: time.Unix(1556467463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xcd\x6a\x84\x30\x10\xc0\xf1\x7b\x9e\x62\x8e\x09\xf8\x06\x9e\xd2\x38\x85\xd2\x34\x96\x98\x42\x3d\x49\x8a\x39\x08\x46\x8b\xba\xbb\xaf\xbf\xec\x64\x3f\x5c\x71\x73\x0a\x4c\xf8\xe5\x3f\xca\xa2\x74\x08\x4e\xbe\x69\x84\xe3\xd8\x1f\x86\x25\x84\x69\x06\xce\x00\x00\x42\xf4\x5d\x7f\xb9\x38\xfc\x75\xf0\x6d\x3f\xbe\xa4\xad\xe1\x13\xeb\x8c\xc6\xff\x7e\x9e\x4f\xe3\xd4\xa6\xb1\x29\x1d\x98\x1f\xad\x99\xc8\x19\x7b\x72\x97\xe0\xe3\x8d\xec\xda\x97\xdc\xe0\x63\xa0\xd1\xbe\xd0\xc4\x10\xff\x1e\x6d\xf7\xd8\x26\x55\x92\x69\xf1\x1d\x2d\x1a\x85\xd5\x6a\x19\x4e\x0f\x04\x94\x06\x0a\xd4\xe8\x10\x94\xac\x94\x2c\x30\x7d\x4b\x36\x65\xa5\xb3\x85\xa8\x9e\x77\xed\x2e\x40\xc2\x6a\x13\xe0\x57\x2e\xdb\x06\x0a\x26\xf2\x73\x00\x00\x00\xff\xff\x47\xb3\x5e\x3d\x6e\x01\x00\x00")

func _1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initUpSql,
		"1_init.up.sql",
	)
}

func _1_initUpSql() (*asset, error) {
	bytes, err := _1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init.up.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1556571522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x57\x28\x2e\xcc\x51\xd0\xcd\x4c\xcf\xcb\x2f\x4a\x55\x80\x4a\xe8\xa5\xe7\x2b\xe8\x71\x15\x24\x26\x67\x27\xa6\xa7\x82\x14\x70\x01\x02\x00\x00\xff\xff\x4b\xa8\x03\xa0\x43\x00\x00\x00")

func sqlGoBytes() ([]byte, error) {
	return bindataRead(
		_sqlGo,
		"sql.go",
	)
}

func sqlGo() (*asset, error) {
	bytes, err := sqlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql.go", size: 67, mode: os.FileMode(420), modTime: time.Unix(1556571142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_init.down.sql": _1_initDownSql,
	"1_init.up.sql": _1_initUpSql,
	"sql.go": sqlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_init.down.sql": &bintree{_1_initDownSql, map[string]*bintree{}},
	"1_init.up.sql": &bintree{_1_initUpSql, map[string]*bintree{}},
	"sql.go": &bintree{sqlGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

